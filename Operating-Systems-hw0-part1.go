package main
import "fmt"
import "time"

// Producer process that generates and prints numbers
// A for loop that generates numbers for producer from 1 to 5, pritns them and sends them to the channel for the consumer function to consume
func producer(ch chan<- int) {
	for i := 1; i <= 5; i++ {
		fmt.Printf("Producer: %d\n", i)
		ch <- i // Send data to the channel for the consumer to consume
		time.Sleep(100 * time.Millisecond) // Add a delay to ensure the proper order of the output is printed
	}
	close(ch) // Close the channel to signal the consumer to stop
}

// Consumer process that consumes and prints numbers generated by the prodcuer process. 
// It takes the numbers from the channel and prints them

func consumer(ch <-chan int, end chan<- bool) {
	// Loop to receive the numbers from the channel provided by the producer and print them
	for num := range ch {
		fmt.Printf("Consumer: %d\n", num)
		time.Sleep(100 * time.Millisecond) // Add a delay to ensure the proper order of the output is printed
	}
	end <- true // Signal that the consumer is done by sending true boolean value to the end channel
}

func main() {
	// Create a channel for communication between producer and consumer
	// This channel will be used to send numbers from the producer to the consumer
	ch := make(chan int)
	// Create a channel to signal when the consumer is done and end the program
	end := make(chan bool)

	// Start the producer and consumer goroutines
	go producer(ch)
	go consumer(ch, end)

	// Wait for the consumer to finish
	// The consumer will signal when it is done by sending a value to the end channel
	<-end
}